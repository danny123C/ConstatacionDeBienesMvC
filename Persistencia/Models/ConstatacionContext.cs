// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Persistencia.Models;

public partial class ConstatacionContext : DbContext
{
    public ConstatacionContext(DbContextOptions<ConstatacionContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }

    public virtual DbSet<Bien> Biens { get; set; }

    public virtual DbSet<BienBaja> BienBajas { get; set; }

    public virtual DbSet<BienesConstatado> BienesConstatados { get; set; }

    public virtual DbSet<Campus> Campuses { get; set; }

    public virtual DbSet<Dependencium> Dependencia { get; set; }

    public virtual DbSet<Mantenimiento> Mantenimientos { get; set; }

    public virtual DbSet<TipoEstadoBien> TipoEstadoBiens { get; set; }

    public virtual DbSet<TipoMantenimiento> TipoMantenimientos { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.NormalizedName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetRoleClaim>(entity =>
        {
            entity.Property(e => e.RoleId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasForeignKey(d => d.RoleId);
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
            entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
            entity.Property(e => e.UserName).HasMaxLength(256);

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("AspNetUserRoles");
                    });
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

            entity.Property(e => e.UserId)
                .IsRequired()
                .HasMaxLength(450);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<Bien>(entity =>
        {
            entity.HasKey(e => e.CodigoEsbay);

            entity.ToTable("Bien");

            entity.Property(e => e.CodigoEsbay).ValueGeneratedNever();
            entity.Property(e => e.Custodio).HasMaxLength(50);
            entity.Property(e => e.FechaConstatacion)
                .HasDefaultValueSql("(N'')")
                .HasColumnType("datetime");
            entity.Property(e => e.FechaTransaccion).HasColumnType("datetime");
            entity.Property(e => e.IdTipoMantenimiento).HasDefaultValueSql("(N'')");

            entity.HasOne(d => d.IdCampusNavigation).WithMany(p => p.Biens)
                .HasForeignKey(d => d.IdCampus)
                .HasConstraintName("FK_Bien_Campus");

            entity.HasOne(d => d.IdDependenciaNavigation).WithMany(p => p.Biens)
                .HasForeignKey(d => d.IdDependencia)
                .HasConstraintName("FK_Dependencia_Bien");

            entity.HasOne(d => d.IdTipoMantenimientoNavigation).WithMany(p => p.Biens)
                .HasForeignKey(d => d.IdTipoMantenimiento)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Bien_TipoMantenimiento");
        });

        modelBuilder.Entity<BienBaja>(entity =>
        {
            entity.ToTable("BienBaja");

            entity.Property(e => e.FechaTransaccion).HasColumnType("datetime");

            entity.HasOne(d => d.CodigoEsbayNavigation).WithMany(p => p.BienBajas)
                .HasForeignKey(d => d.CodigoEsbay)
                .HasConstraintName("FK_BienBaja_Bien");
        });

        modelBuilder.Entity<BienesConstatado>(entity =>
        {
            entity.Property(e => e.Custodio).HasMaxLength(50);

            entity.HasOne(d => d.CodigoEsbayNavigation).WithMany(p => p.BienesConstatados)
                .HasForeignKey(d => d.CodigoEsbay)
                .HasConstraintName("FK_BienesConstatados_Bien");
        });

        modelBuilder.Entity<Campus>(entity =>
        {
            entity.ToTable("Campus");

            entity.Property(e => e.DireccionIpAudd)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FechaTransaccion).HasColumnType("datetime");
            entity.Property(e => e.IdUsuarioAudd)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Nombre).IsRequired();
            entity.Property(e => e.RolAudd).IsRequired();
            entity.Property(e => e.SistemaAudd)
                .IsRequired()
                .HasMaxLength(250);
        });

        modelBuilder.Entity<Dependencium>(entity =>
        {
            entity.Property(e => e.DireccionIpAudd)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FechaTransaccion).HasColumnType("datetime");
            entity.Property(e => e.IdUsuarioAudd)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Nombre).IsRequired();
            entity.Property(e => e.RolAudd).IsRequired();
            entity.Property(e => e.SistemaAudd)
                .IsRequired()
                .HasMaxLength(250);
        });

        modelBuilder.Entity<Mantenimiento>(entity =>
        {
            entity.ToTable("Mantenimiento");

            entity.HasOne(d => d.CodigoEsbayNavigation).WithMany(p => p.Mantenimientos)
                .HasForeignKey(d => d.CodigoEsbay)
                .HasConstraintName("FK_Mantenimiento_Bien");

            entity.HasOne(d => d.IdTipoEstadoBienNavigation).WithMany(p => p.Mantenimientos)
                .HasForeignKey(d => d.IdTipoEstadoBien)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Mantenimiento_TipoEstadoBien");
        });

        modelBuilder.Entity<TipoEstadoBien>(entity =>
        {
            entity.ToTable("TipoEstadoBien");
        });

        modelBuilder.Entity<TipoMantenimiento>(entity =>
        {
            entity.ToTable("TipoMantenimiento");

            entity.Property(e => e.DireccionIpAudd)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FechaTransaccion).HasColumnType("datetime");
            entity.Property(e => e.IdUsuarioAudd)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Nombre).IsRequired();
            entity.Property(e => e.RolAudd).IsRequired();
            entity.Property(e => e.SistemaAudd)
                .IsRequired()
                .HasMaxLength(250);
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.ToTable("Usuario");

            entity.Property(e => e.Clave).IsRequired();
            entity.Property(e => e.Correo).IsRequired();
            entity.Property(e => e.Nombre).IsRequired();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}